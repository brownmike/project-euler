# Triangular, pentagonal, and hexagonal
# Problem 45

# Triangle, pentagonal, and hexagonal numbers are generated by the
# following formulae:

  # Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  # Pentagonal	 	Pn=n(3nâˆ’1)/2	 	1, 5, 12, 22, 35, ...
  # Hexagonal	 	Hn=n(2nâˆ’1)	 	1, 6, 15, 28, 45, ...

# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.

require 'benchmark'

class Euler45
  def self.solve
    t = TriangleNumbers.new
    285.times { t.next }
    loop do
      n = t.numbers.last
      if n.pentagonal? && n.hexagonal?
        puts "#{n} is the next triangle number > 40755 that is hex & pentagonal"
        return n
      end
      t.next
    end
  end
end

class TriangleNumbers
  attr_reader :numbers

  def initialize
    @numbers = [1]
    @i = 1
  end

  def next
    @numbers << numbers.last + @i.next
    @i += 1
    numbers.last
  end
end

class Integer
  def triangle?
    n = Math.sqrt((self * 2) * 4 + 1)/2 - 1/2.0
    n*(n+1)/2 == self
  end

  def pentagonal?
    n = Math.sqrt((self * 2) * 12 + 1)/6 + 1/6.0
    n*(3*n-1)/2 == self && n % 1 == 0
  end

  def hexagonal?
    n = Math.sqrt(self * 8 + 1)/4 + 1/4.0
    n*(2*n-1) == self && n % 1 == 0
  end
end

p Benchmark.measure { Euler45.solve }
